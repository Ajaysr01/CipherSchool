1. Friend fxns: a fxn which is given access of all the private and protected members of a class;
	it is declared by using the keyword friend inside class
	its return type , name and its parameters should be declared in the class's public access specifier.
eg: 
#include <iostream>
#include <limits>
using namespace std;

class Box{
private:
double width;
double height;
double depth;

public:
Box(double w, double h, double d) {
width = w;
height = h;
depth = d;
}

friend void printDimension(const Box& b);
};

void printDimension(const Box& b){
cout << "width : " << b.width << b.height << b.depth;
}


int main()
{
Box b(10.9,2.5,6.8);
printDimension(b);
return 0;
}




2. Reference variable (&var): both variables, this variable and 
the original variable both share same memory space. also if any 
of these values is changed, both of them gets the same value;


3. Deep copy : copy object, copy is made of all the variables;
   shallow copy : copy object is made of a initial obj of a class. refrencing is used;

#include <iostream>
using namespace std;

class LPU{
public:
int *value;
int size;

LPU(int s){
size = s;
value = new int[size];
}

LPU(const LPU &objCopy) {
size = objCopy.size;
value = new int[size];
copy(objCopy.value, objCopy.value + size,value);
}
};
int main()
{

}





4. External Fragmentation: condition in stack in which memory locations are assigned randomly..there is free space but not sequenced/contigious; 
   Internal Fragmentation : when more memory is allocated than requested, the memory is wasted.